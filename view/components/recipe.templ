package components 

import (
	"gotth/template/backend/models"
	"gotth/template/view/components/recipe"
	"strconv"
)

templ Recipe(recipe models.Recipe, serving uint, isUsers bool) {
	<div role="alert" id="delete-dialog" class="alert alert-warning fixed top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 z-[9999]" hidden>
		<svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 shrink-0 stroke-current" fill="none" viewBox="0 0 24 24">
			<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z"></path>
		</svg>
		<div>
			<h3 class="font-bold">Delete {recipe.Name}</h3>
			<div class="text-xs">This Recipe will be deleted for ever. </div>
		</div>
			<button class="btn btn-sm" onclick="denyDeleteDialog()">Deny</button>
			<button class="btn btn-sm btn-ghost btn-warning" hx-delete={ "/recipe/" + recipe.ID}>Accept</button>
	</div>
	<div itemscope itemtype="http://schema.org/Recipe" class="flex flex-col items-center w-full" id="recipe-body">
		<!-- Optional but recommended structured data -->
		if recipe.RecipeCategory != "" {
			<meta itemprop="recipeCategory" content={ recipe.RecipeCategory }/>
		}
		if recipe.Cuisine != "" {
			<meta itemprop="recipeCuisine" content={ recipe.Cuisine }/>
		}
		<div class="w-full flex justify-center" id="image-container">
			<div class="w-full max-w-3xl relative">
				<img
					itemprop="image"
					src={ "http://localhost:3000/images/" + recipe.Image }
					alt="Food"
					class="w-full h-110 object-cover"
					id="food-image"
					style="object-position: center 50%;"
				/>
				if isUsers {
					<label class="btn btn-circle swap swap-rotate absolute top-2 right-2 btn-primary" name="editLabel">
						<!-- this hidden checkbox controls the state -->
						<input type="checkbox" name="editButtons" onchange="toggleSwap()" checked="true"/>
						<!-- hamburger icon -->
						<svg
							class="swap-on fill-current"
							xmlns="http://www.w3.org/2000/svg"
							width="32"
							height="32"
							viewBox="0 0 512 512"
						>
							<path d="M64,384H448V341.33H64Zm0-106.67H448V234.67H64ZM64,128v42.67H448V128Z"></path>
						</svg>
						<!-- close icon -->
						<svg
							class="swap-off fill-current"
							xmlns="http://www.w3.org/2000/svg"
							width="32"
							height="32"
							viewBox="0 0 512 512"
						>
							<polygon
								points="400 145.49 366.51 112 256 222.51 145.49 112 112 145.49 222.51 256 112 366.51 145.49 400 256 289.49 366.51 400 400 366.51 289.49 256 400 145.49"
							></polygon>
						</svg>
					</label>
					<button class="btn btn-circle absolute top-15 right-2 btn-primary" name="edit" hidden hx-get={ "/redirect/recipe/edit/" + recipe.ID } hx-swap="none">
						<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6">
							<path stroke-linecap="round" stroke-linejoin="round" d="m16.862 4.487 1.687-1.688a1.875 1.875 0 1 1 2.652 2.652L6.832 19.82a4.5 4.5 0 0 1-1.897 1.13l-2.685.8.8-2.685a4.5 4.5 0 0 1 1.13-1.897L16.863 4.487Zm0 0L19.5 7.125"></path>
						</svg>
					</button>
					<button class="btn btn-circle absolute top-28 right-2 btn-warning" name="delete" hidden onclick="showDeleteDialog()">
						<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6">
							<path stroke-linecap="round" stroke-linejoin="round" d="m14.74 9-.346 9m-4.788 0L9.26 9m9.968-3.21c.342.052.682.107 1.022.166m-1.022-.165L18.16 19.673a2.25 2.25 0 0 1-2.244 2.077H8.084a2.25 2.25 0 0 1-2.244-2.077L4.772 5.79m14.456 0a48.108 48.108 0 0 0-3.478-.397m-12 .562c.34-.059.68-.114 1.022-.165m0 0a48.11 48.11 0 0 1 3.478-.397m7.5 0v-.916c0-1.18-.91-2.164-2.09-2.201a51.964 51.964 0 0 0-3.32 0c-1.18.037-2.09 1.022-2.09 2.201v.916m7.5 0a48.667 48.667 0 0 0-7.5 0"></path>
						</svg>
					</button>
				}
			</div>
		</div>
		<div class="flex w-full justify-center relative">
			<div id="curved-corner-bottomright" class="h-20 -mt-25 hidden sm:block"></div>
			<div class="hidden sm:block h-20 w-10 -mt-20 bg-white rounded-tl-[2vw]"></div>
			<div class="flex -mt-20 w-full sm:w-120 justify-center bg-white rounded-tl-[2vw] sm:rounded-tl-[0vw] rounded-tr-[2vw] sm:rounded-tr-[0vw]">
				<h1 class="text-4xl font-bold my-4" itemprop="name">{ recipe.Name }</h1>
			</div>
			<div class="hidden sm:block h-20 w-10 -mt-20 rounded-tr-[2vw] bg-white"></div>
			<div id="curved-corner-bottomleft" class="h-20 -mt-25 hidden sm:block"></div>
		</div>
		<div class="w-full grid grid-cols-1 xs:grid-cols-1 sm:grid-cols-1 lg:grid-cols-2">
			<!--Descirption & Time-->
			<div class="mx-4 w-full flex justify-center lg:col-span-2">
				@recipe_components.Description(recipe)
			</div>
			<!-- Ingredients & Servings & bring -->
			<div class="mb-4 flex justify-center items-start">
				<div class="card bg-base-300 w-96 shadow-sm">
					<div class="card-body">
						<h2 class="card-title">Ingredients</h2>
						<div id="servings">
							@recipe_components.Servings(recipe.Ingredients, serving, recipe.ID)
						</div>
						<!-- Bring Integration -->
						<div class="my-4 flex w-full justify-center">
							<script async="async" src="//platform.getbring.com/widgets/import.js"></script>
							<div data-bring-import="https://ferber.io" data-bring-language="en" style="display:none"></div>
							<a href="https://www.getbring.com"></a>
						</div>
					</div>
				</div>
			</div>
			<!-- Instructions -->
			<div class="mb-4 ml-0 mr-0 xs:mr-20 sm:mr-20 lg:mr-10 xs:ml-20 sm:ml-20 lg:ml-0">
				<h2 class="text-2xl font-bold mb-2 text-center xs:text-center sm:text-center lg:text-left">Instructions</h2>
				for i, instruction := range recipe.Instructions {
					<div class="max-w mb-4" itemprop="recipeInstructions" itemscope itemtype="http://schema.org/HowToStep">
						<meta itemprop="position" content={ strconv.Itoa(i + 1) }/>
						<p class="mx-4 text-lg font-bold text-center xs:text-center sm:text-center lg:text-left" itemprop="name">{ strconv.Itoa(i+1) }. { instruction.Header }</p>
						<p class="mx-4 text-justify xs:text-justify sm:text-justify lg:text-left" itemprop="text">{ instruction.Text }</p>
					</div>
				}
			</div>
		</div>
	</div>
	<style>
		#curved-corner-bottomleft,
		#curved-corner-bottomright {
		width: 100px;
		height: 100px;
		overflow: hidden;
		position: relative;
		}


		#curved-corner-bottomleft:before {
			content: "";
			display: block;
			width: 100%;
			height: 100%;
			position: absolute;
			border-radius: 50%;
			bottom: 0;
			left: 0;
			box-shadow: -50px 50px 0 0 white;
		}

		#curved-corner-bottomright:before {
		content: "";
		display: block;
		width: 100%;
		height: 100%;
		position: absolute;
		border-radius: 50%;
		bottom: 0;
		right: 0;
		box-shadow: 50px 50px 0 0 white;
		}
	</style>
	<script>
		function toggleSwap() {
			value = document.querySelector('input[name="editButtons"]').checked

			edit = document.querySelector('button[name="edit"]').hidden = value
			document.querySelector('button[name="delete"]').hidden = value
		}

		  window.onload = function() {
			var image = document.getElementById("food-image");
			var colorThief = new ColorThief();

			if (image.complete) {
			var dominantColor = colorThief.getColor(image);  // Get dominant color
			var rgbColor = 'rgb(' + dominantColor.join(',') + ')';
			document.getElementById("image-container").style.backgroundColor = rgbColor;
			} else {
			image.onload = function() {
				var dominantColor = colorThief.getColor(image);
				var rgbColor = 'rgb(' + dominantColor.join(',') + ')';
				document.getElementById("image-container").style.backgroundColor = rgbColor;
			};
			}
		};

		function showDeleteDialog() {
			document.getElementById("recipe-body").classList.add("blur-sm")
			document.getElementById("delete-dialog").hidden = false
		}

		function denyDeleteDialog() {
			document.getElementById("recipe-body").classList.remove("blur-sm")
			document.getElementById("delete-dialog").hidden = true
		}
	</script>
}
